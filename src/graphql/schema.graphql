# source: http://localhost:4000
# timestamp: Sun Feb 10 2019 09:50:13 GMT+0100 (GMT+01:00)

type Company implements Node {
  id: ID!
  name: String!
  credits: Int!
  deleted: Boolean!
  contact: User!
  employees(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  interviews(where: InterviewWhereInput, orderBy: InterviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interview!]
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CompanyCreateOneWithoutContactInput {
  create: CompanyCreateWithoutContactInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutEmployeesInput {
  create: CompanyCreateWithoutEmployeesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutInterviewsInput {
  create: CompanyCreateWithoutInterviewsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutResultsInput {
  create: CompanyCreateWithoutResultsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutContactInput {
  name: String!
  credits: Int
  deleted: Boolean
  employees: UserCreateManyWithoutCompanyInput
  interviews: InterviewCreateManyWithoutCompanyInput
  results: ResultCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutEmployeesInput {
  name: String!
  credits: Int
  deleted: Boolean
  contact: UserCreateOneWithoutContactOfInput!
  interviews: InterviewCreateManyWithoutCompanyInput
  results: ResultCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutInterviewsInput {
  name: String!
  credits: Int
  deleted: Boolean
  contact: UserCreateOneWithoutContactOfInput!
  employees: UserCreateManyWithoutCompanyInput
  results: ResultCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutResultsInput {
  name: String!
  credits: Int
  deleted: Boolean
  contact: UserCreateOneWithoutContactOfInput!
  employees: UserCreateManyWithoutCompanyInput
  interviews: InterviewCreateManyWithoutCompanyInput
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  credits: Int

  """All values that are not equal to given value."""
  credits_not: Int

  """All values that are contained in given list."""
  credits_in: [Int!]

  """All values that are not contained in given list."""
  credits_not_in: [Int!]

  """All values less than the given value."""
  credits_lt: Int

  """All values less than or equal the given value."""
  credits_lte: Int

  """All values greater than the given value."""
  credits_gt: Int

  """All values greater than or equal the given value."""
  credits_gte: Int
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contact: UserWhereInput
  employees_every: UserWhereInput
  employees_some: UserWhereInput
  employees_none: UserWhereInput
  interviews_every: InterviewWhereInput
  interviews_some: InterviewWhereInput
  interviews_none: InterviewWhereInput
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar DateTime

type EvaluationTag {
  tag: String!
  value: Int!
}

input EvaluationTagCreateInput {
  tag: String
  value: Int
}

input EvaluationTagCreateManyInput {
  create: [EvaluationTagCreateInput!]
}

enum EvaluationTagOrderByInput {
  tag_ASC
  tag_DESC
  value_ASC
  value_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input EvaluationTagWhereInput {
  """Logical AND on all given filters."""
  AND: [EvaluationTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [EvaluationTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EvaluationTagWhereInput!]
  tag: String

  """All values that are not equal to given value."""
  tag_not: String

  """All values that are contained in given list."""
  tag_in: [String!]

  """All values that are not contained in given list."""
  tag_not_in: [String!]

  """All values less than the given value."""
  tag_lt: String

  """All values less than or equal the given value."""
  tag_lte: String

  """All values greater than the given value."""
  tag_gt: String

  """All values greater than or equal the given value."""
  tag_gte: String

  """All values containing the given string."""
  tag_contains: String

  """All values not containing the given string."""
  tag_not_contains: String

  """All values starting with the given string."""
  tag_starts_with: String

  """All values not starting with the given string."""
  tag_not_starts_with: String

  """All values ending with the given string."""
  tag_ends_with: String

  """All values not ending with the given string."""
  tag_not_ends_with: String
  value: Int

  """All values that are not equal to given value."""
  value_not: Int

  """All values that are contained in given list."""
  value_in: [Int!]

  """All values that are not contained in given list."""
  value_not_in: [Int!]

  """All values less than the given value."""
  value_lt: Int

  """All values less than or equal the given value."""
  value_lte: Int

  """All values greater than the given value."""
  value_gt: Int

  """All values greater than or equal the given value."""
  value_gte: Int
}

type Interview implements Node {
  id: ID!
  name: String!
  company: Company!
  activeUntil: DateTime!
  deleted: Boolean!
  creator: User!
  interview(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  limit: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input InterviewCreateInput {
  name: String!
  activeUntil: DateTime!
  limit: Int
  interview: QuestionCreateManyWithoutInterviewInput
}

input InterviewCreateManyWithoutCompanyInput {
  create: [InterviewCreateWithoutCompanyInput!]
  connect: [InterviewWhereUniqueInput!]
}

input InterviewCreateManyWithoutCreatorInput {
  create: [InterviewCreateWithoutCreatorInput!]
  connect: [InterviewWhereUniqueInput!]
}

input InterviewCreateOneWithoutInterviewInput {
  create: InterviewCreateWithoutInterviewInput
  connect: InterviewWhereUniqueInput
}

input InterviewCreateOneWithoutResultsInput {
  create: InterviewCreateWithoutResultsInput
  connect: InterviewWhereUniqueInput
}

type InterviewCreateResponse {
  id: ID!
  newBalance: Int!
}

input InterviewCreateWithoutCompanyInput {
  name: String!
  activeUntil: DateTime!
  deleted: Boolean
  limit: Int
  creator: UserCreateOneWithoutInterviewsInput!
  interview: QuestionCreateManyWithoutInterviewInput
  results: ResultCreateManyWithoutInterviewInput
}

input InterviewCreateWithoutCreatorInput {
  name: String!
  activeUntil: DateTime!
  deleted: Boolean
  limit: Int
  company: CompanyCreateOneWithoutInterviewsInput!
  interview: QuestionCreateManyWithoutInterviewInput
  results: ResultCreateManyWithoutInterviewInput
}

input InterviewCreateWithoutInterviewInput {
  name: String!
  activeUntil: DateTime!
  deleted: Boolean
  limit: Int
  company: CompanyCreateOneWithoutInterviewsInput!
  creator: UserCreateOneWithoutInterviewsInput!
  results: ResultCreateManyWithoutInterviewInput
}

input InterviewCreateWithoutResultsInput {
  name: String!
  activeUntil: DateTime!
  deleted: Boolean
  limit: Int
  company: CompanyCreateOneWithoutInterviewsInput!
  creator: UserCreateOneWithoutInterviewsInput!
  interview: QuestionCreateManyWithoutInterviewInput
}

enum InterviewOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  activeUntil_ASC
  activeUntil_DESC
  deleted_ASC
  deleted_DESC
  limit_ASC
  limit_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input InterviewWhereInput {
  """Logical AND on all given filters."""
  AND: [InterviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  activeUntil: DateTime

  """All values that are not equal to given value."""
  activeUntil_not: DateTime

  """All values that are contained in given list."""
  activeUntil_in: [DateTime!]

  """All values that are not contained in given list."""
  activeUntil_not_in: [DateTime!]

  """All values less than the given value."""
  activeUntil_lt: DateTime

  """All values less than or equal the given value."""
  activeUntil_lte: DateTime

  """All values greater than the given value."""
  activeUntil_gt: DateTime

  """All values greater than or equal the given value."""
  activeUntil_gte: DateTime
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  limit: Int

  """All values that are not equal to given value."""
  limit_not: Int

  """All values that are contained in given list."""
  limit_in: [Int!]

  """All values that are not contained in given list."""
  limit_not_in: [Int!]

  """All values less than the given value."""
  limit_lt: Int

  """All values less than or equal the given value."""
  limit_lte: Int

  """All values greater than the given value."""
  limit_gt: Int

  """All values greater than or equal the given value."""
  limit_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
  creator: UserWhereInput
  interview_every: QuestionWhereInput
  interview_some: QuestionWhereInput
  interview_none: QuestionWhereInput
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
}

input InterviewWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type Me {
  me: User!
  token: String!
}

type Mutation {
  signup(name: String!, email: String!, password: String!): Me!
  login(email: String!, password: String!): Me!
  createOwnCompany(name: String!, employees: [UserCreateWithoutCompanyInput!]!): Company!
  addEmployee(name: String!, email: String!, password: String!): User!
  removeEmployee(id: ID!): User!
  updateOwnCompany(name: String, contact: ID!): Company!
  addCredits(amount: Int!): Int!
  createTemplate(data: TemplateCreateInput!): Template!
  createInterview(data: InterviewCreateInput!): InterviewCreateResponse!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum Permission {
  ADMIN
  USER
  CREATEINTERVIEW
  SEERESULTS
  EDITINTERVIEW
  CLOSEINTERVIEW
  DELETEINTERVIEW
  EDITPERMISSIONS
}

type Query {
  me: User!
  myCompany: Company!
  myEmployees(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]!
  myInterviews(where: InterviewWhereInput, orderBy: InterviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interview!]
  checkUser(email: String!): Boolean!
}

type Question implements Node {
  id: ID!
  parentTemplate: Template
  parentQuestion: Question
  number: Int!
  question: String!
  subQuestions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  answerTags(where: EvaluationTagWhereInput, orderBy: EvaluationTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EvaluationTag!]
  matchTags: [String!]!
  distraction: Int
  time: Int
  givenAnswers: [String!]!
  interview: Interview
  createdAt: DateTime!
  updatedAt: DateTime!
}

input QuestionCreategivenAnswersInput {
  set: [String!]
}

input QuestionCreateManyWithoutInterviewInput {
  create: [QuestionCreateWithoutInterviewInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutParentQuestionInput {
  create: [QuestionCreateWithoutParentQuestionInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutParentTemplateInput {
  create: [QuestionCreateWithoutParentTemplateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreatematchTagsInput {
  set: [String!]
}

input QuestionCreateOneWithoutSubQuestionsInput {
  create: QuestionCreateWithoutSubQuestionsInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutInterviewInput {
  number: Int!
  question: String!
  distraction: Int
  time: Int
  matchTags: QuestionCreatematchTagsInput
  givenAnswers: QuestionCreategivenAnswersInput
  parentTemplate: TemplateCreateOneWithoutInterviewInput
  parentQuestion: QuestionCreateOneWithoutSubQuestionsInput
  subQuestions: QuestionCreateManyWithoutParentQuestionInput
  answerTags: EvaluationTagCreateManyInput
}

input QuestionCreateWithoutParentQuestionInput {
  number: Int!
  question: String!
  distraction: Int
  time: Int
  matchTags: QuestionCreatematchTagsInput
  givenAnswers: QuestionCreategivenAnswersInput
  parentTemplate: TemplateCreateOneWithoutInterviewInput
  subQuestions: QuestionCreateManyWithoutParentQuestionInput
  answerTags: EvaluationTagCreateManyInput
  interview: InterviewCreateOneWithoutInterviewInput
}

input QuestionCreateWithoutParentTemplateInput {
  number: Int!
  question: String!
  distraction: Int
  time: Int
  matchTags: QuestionCreatematchTagsInput
  givenAnswers: QuestionCreategivenAnswersInput
  parentQuestion: QuestionCreateOneWithoutSubQuestionsInput
  subQuestions: QuestionCreateManyWithoutParentQuestionInput
  answerTags: EvaluationTagCreateManyInput
  interview: InterviewCreateOneWithoutInterviewInput
}

input QuestionCreateWithoutSubQuestionsInput {
  number: Int!
  question: String!
  distraction: Int
  time: Int
  matchTags: QuestionCreatematchTagsInput
  givenAnswers: QuestionCreategivenAnswersInput
  parentTemplate: TemplateCreateOneWithoutInterviewInput
  parentQuestion: QuestionCreateOneWithoutSubQuestionsInput
  answerTags: EvaluationTagCreateManyInput
  interview: InterviewCreateOneWithoutInterviewInput
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  question_ASC
  question_DESC
  distraction_ASC
  distraction_DESC
  time_ASC
  time_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  distraction: Int

  """All values that are not equal to given value."""
  distraction_not: Int

  """All values that are contained in given list."""
  distraction_in: [Int!]

  """All values that are not contained in given list."""
  distraction_not_in: [Int!]

  """All values less than the given value."""
  distraction_lt: Int

  """All values less than or equal the given value."""
  distraction_lte: Int

  """All values greater than the given value."""
  distraction_gt: Int

  """All values greater than or equal the given value."""
  distraction_gte: Int
  time: Int

  """All values that are not equal to given value."""
  time_not: Int

  """All values that are contained in given list."""
  time_in: [Int!]

  """All values that are not contained in given list."""
  time_not_in: [Int!]

  """All values less than the given value."""
  time_lt: Int

  """All values less than or equal the given value."""
  time_lte: Int

  """All values greater than the given value."""
  time_gt: Int

  """All values greater than or equal the given value."""
  time_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  parentTemplate: TemplateWhereInput
  parentQuestion: QuestionWhereInput
  subQuestions_every: QuestionWhereInput
  subQuestions_some: QuestionWhereInput
  subQuestions_none: QuestionWhereInput
  answerTags_every: EvaluationTagWhereInput
  answerTags_some: EvaluationTagWhereInput
  answerTags_none: EvaluationTagWhereInput
  interview: InterviewWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Result implements Node {
  id: ID!
  deleted: Boolean!
  ip: String
  long: Float
  lat: Float
  name: String
  email: String
  score: Int
  content: Json!
  interview: Interview!
  company: Company!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ResultCreateManyWithoutCompanyInput {
  create: [ResultCreateWithoutCompanyInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutInterviewInput {
  create: [ResultCreateWithoutInterviewInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateWithoutCompanyInput {
  deleted: Boolean
  ip: String
  long: Float
  lat: Float
  name: String
  email: String
  score: Int
  content: Json!
  interview: InterviewCreateOneWithoutResultsInput!
}

input ResultCreateWithoutInterviewInput {
  deleted: Boolean
  ip: String
  long: Float
  lat: Float
  name: String
  email: String
  score: Int
  content: Json!
  company: CompanyCreateOneWithoutResultsInput!
}

enum ResultOrderByInput {
  id_ASC
  id_DESC
  deleted_ASC
  deleted_DESC
  ip_ASC
  ip_DESC
  long_ASC
  long_DESC
  lat_ASC
  lat_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  score_ASC
  score_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ResultWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  ip: String

  """All values that are not equal to given value."""
  ip_not: String

  """All values that are contained in given list."""
  ip_in: [String!]

  """All values that are not contained in given list."""
  ip_not_in: [String!]

  """All values less than the given value."""
  ip_lt: String

  """All values less than or equal the given value."""
  ip_lte: String

  """All values greater than the given value."""
  ip_gt: String

  """All values greater than or equal the given value."""
  ip_gte: String

  """All values containing the given string."""
  ip_contains: String

  """All values not containing the given string."""
  ip_not_contains: String

  """All values starting with the given string."""
  ip_starts_with: String

  """All values not starting with the given string."""
  ip_not_starts_with: String

  """All values ending with the given string."""
  ip_ends_with: String

  """All values not ending with the given string."""
  ip_not_ends_with: String
  long: Float

  """All values that are not equal to given value."""
  long_not: Float

  """All values that are contained in given list."""
  long_in: [Float!]

  """All values that are not contained in given list."""
  long_not_in: [Float!]

  """All values less than the given value."""
  long_lt: Float

  """All values less than or equal the given value."""
  long_lte: Float

  """All values greater than the given value."""
  long_gt: Float

  """All values greater than or equal the given value."""
  long_gte: Float
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  interview: InterviewWhereInput
  company: CompanyWhereInput
}

input ResultWhereUniqueInput {
  id: ID
}

type Template implements Node {
  id: ID!
  deleted: Boolean!
  name: String!
  interview(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  params: Json
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TemplateCreateInput {
  deleted: Boolean
  name: String!
  params: Json
  interview: QuestionCreateManyWithoutParentTemplateInput
}

input TemplateCreateOneWithoutInterviewInput {
  create: TemplateCreateWithoutInterviewInput
  connect: TemplateWhereUniqueInput
}

input TemplateCreateWithoutInterviewInput {
  deleted: Boolean
  name: String!
  params: Json
}

input TemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [TemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [TemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  interview_every: QuestionWhereInput
  interview_some: QuestionWhereInput
  interview_none: QuestionWhereInput
}

input TemplateWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String!
  permissions: [String!]
  deleted: Boolean!
  name: String!
  company: Company
  interviews: [Interview!]!
  contactOf: Company
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserCreateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutContactOfInput {
  create: UserCreateWithoutContactOfInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInterviewsInput {
  create: UserCreateWithoutInterviewsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCompanyInput {
  email: String!
  name: String!
  password: String!
}

input UserCreateWithoutContactOfInput {
  email: String!
  deleted: Boolean
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  company: CompanyCreateOneWithoutEmployeesInput
  interviews: InterviewCreateManyWithoutCreatorInput
}

input UserCreateWithoutInterviewsInput {
  email: String!
  deleted: Boolean
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  company: CompanyCreateOneWithoutEmployeesInput
  contactOf: CompanyCreateOneWithoutContactInput
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  deleted_ASC
  deleted_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
  interviews_every: InterviewWhereInput
  interviews_some: InterviewWhereInput
  interviews_none: InterviewWhereInput
  contactOf: CompanyWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
